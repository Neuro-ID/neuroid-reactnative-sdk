# ******************************************************************
# To create an NPM package release PR, run this workflow from the GitHub UI and
# 1. select parameters based on the type of release:
#
# - Major Update
#   Select "Branch: main"
#   Set `true` if there are breaking changes affecting sdk's across platforms i.e. react-native, android, ios etc.
#
# - Minor Update 
#   Select "Branch: main"
#   Set `true` if there are multiple minor changes affecting sdk's across platforms i.e. react-native, android, ios etc.
#
# - Patch Update
#   Select "Branch: main"
#   Set `true` if the change affects only the react-native platform.
# 
# 2. Include Android SDK version released in Jitpack (https://jitpack.io/)
# ******************************************************************

name: Create version update release PR

on:
  workflow_dispatch:
    inputs:
      versionUpdate:
        description: >
          Choose the type of version update:            
          ** major: Cross platform breaking changes                                   
          ** minor: Cross platform minor changes                    
          ** patch: Changes affecting only this platform
        required: true
        default: 'patch'
        type: choice
        options: ['major','minor','patch']
      androidSdkVersion:
        description: 'Enter a NID Android SDK version w/o v prefix:'
        required: false
      iosSdkVersion:
        description: 'Enter a NID iOS SDK version w/o v prefix:'
        required: false

permissions:
    pull-requests: write
    contents: write
    issues: write
    
jobs:
  update_version:
    name: Update package version
    runs-on: ubuntu-latest
    steps:
      - name: Determine update type
        run: |
          echo "RELEASE_TYPE=${{ inputs.versionUpdate}}" >> $GITHUB_ENV

      - name: Set Android SDK version to default version if not provided
        run: |
          if [[ -z "${{ github.event.inputs.androidSdkVersion }}" ]]; then
            echo "Android version is not sent in workflow trigger event. Setting to default"
            echo "ANDROID_SDK_VERSION=v3.0.+" >> $GITHUB_ENV
          else
            echo "ANDROID_SDK_VERSION=v${{ github.event.inputs.androidSdkVersion }}" >> $GITHUB_ENV
          fi
      
      - name: Set iOS SDK version to default version if not provided
        run: |
          if [[ -z "${{ github.event.inputs.iosSdkVersion }}" ]]; then
            echo "iOS version is not sent in workflow trigger event. Setting to default"
            echo "IOS_SDK_VERSION=~>3.0.1" >> $GITHUB_ENV
          else
            echo "IOS_SDK_VERSION=${{ github.event.inputs.iosSdkVersion }}" >> $GITHUB_ENV
          fi

      - name: Main branch checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version
        run: |
          git config --global user.email developer@neuro-id.com
          git config --global user.name neuroid-developer
          npm version ${{ env.RELEASE_TYPE }}

      - name: Update types version
        working-directory: neuroid-reactnative-sdk-types/
        run: |
          git config --global user.email developer@neuro-id.com
          git config --global user.name neuroid-developer
          npm version ${{ env.RELEASE_TYPE }}

      - name: Read package version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "BRANCH_NAME=releases/${PACKAGE_VERSION}_version_update" >> $GITHUB_ENV
      
      - name: Update Android Sdk version to latest release version
        run: |
          sed -i "s/:react-android-sdk:[0-9a-zA-Z.-]*/:react-android-sdk:${{ env.ANDROID_SDK_VERSION }}/g" android/build.gradle
          sed -i "s/:react-android-sdk-debug:[0-9a-zA-Z.-]*/:react-android-sdk:${{ env.ANDROID_SDK_VERSION }}/g" android/build.gradle
      
      - name: Update iOS SDK version to latest release version
        run: |
          sed -i "s/s.dependency ['\"]NeuroID['\"],[\s~>.0-9'\"]*/s.dependency 'NeuroID', '${{env.IOS_SDK_VERSION}}'/g" neuroid-reactnative-sdk.podspec

      - name: Commit version update
        run: |
          package_version=${{ env.PACKAGE_VERSION }}
          git config --global user.email developer@neuro-id.com
          git config --global user.name neuroid-developer   
          git checkout -b ${{ env.BRANCH_NAME }}
          git status
          set +e
          git add package.json
          git add neuroid-reactnative-sdk-types
          git add package-lock.json
          git add android/build.gradle
          git commit -m "Update React native SDK to ${package_version}"
          git tag "v${package_version}"
          git push --set-upstream origin ${{ env.BRANCH_NAME }}
          set -e

      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = 'Update To Version: ${{ env.PACKAGE_VERSION }}';
            const body = 'Once merged, this PR will trigger an action to release version: ${{ env.PACKAGE_VERSION }}';
            const headBranch = '${{ env.BRANCH_NAME }}';
            const baseBranch = 'main';
            
            const createPullRequest = async () => {
              const response = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                head: headBranch,
                base: baseBranch
              });
              console.log(`Pull request ${response.data.number} created`);
            };
            
            createPullRequest();


